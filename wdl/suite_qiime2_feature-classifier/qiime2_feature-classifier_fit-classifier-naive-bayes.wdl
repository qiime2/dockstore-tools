# 
# Copyright (c) 2024, QIIME 2 development team.
# 
# Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
# 
# 
# This template was automatically generated by:
#     q2dataflow wdl (version: 0.2.0)
# for:
#     qiime2 (version: 2024.2.0)
# 


version 1.0

struct qiime2_feature_classifier_fit_classifier_naive_bayes_params {
    File reference_reads
    File reference_taxonomy
    File? class_weight
    Float classify__alpha
    Int classify__chunk_size
    String classify__class_prior
    Boolean classify__fit_prior
    Boolean feat_ext__alternate_sign
    String feat_ext__analyzer
    Boolean feat_ext__binary
    String feat_ext__decode_error
    String feat_ext__encoding
    String feat_ext__input
    Boolean feat_ext__lowercase
    Int feat_ext__n_features
    String feat_ext__ngram_range
    String feat_ext__norm
    String feat_ext__preprocessor
    String feat_ext__stop_words
    String feat_ext__strip_accents
    String feat_ext__token_pattern
    String feat_ext__tokenizer
    Boolean verbose
    String classifier
}

task qiime2_feature_classifier_fit_classifier_naive_bayes {

    input {
        File reference_reads
        File reference_taxonomy
        File? class_weight
        Float classify__alpha = 0.001
        Int classify__chunk_size = 20000
        String classify__class_prior = "null"
        Boolean classify__fit_prior = false
        Boolean feat_ext__alternate_sign = false
        String feat_ext__analyzer = "char_wb"
        Boolean feat_ext__binary = false
        String feat_ext__decode_error = "strict"
        String feat_ext__encoding = "utf-8"
        String feat_ext__input = "content"
        Boolean feat_ext__lowercase = true
        Int feat_ext__n_features = 8192
        String feat_ext__ngram_range = "[7, 7]"
        String feat_ext__norm = "l2"
        String feat_ext__preprocessor = "null"
        String feat_ext__stop_words = "null"
        String feat_ext__strip_accents = "null"
        String feat_ext__token_pattern = "(?u)\b\w\w+\b"
        String feat_ext__tokenizer = "null"
        Boolean verbose = false
        String classifier
    }

    qiime2_feature_classifier_fit_classifier_naive_bayes_params task_params = object {
        reference_reads: reference_reads,
        reference_taxonomy: reference_taxonomy,
        class_weight: class_weight,
        classify__alpha: classify__alpha,
        classify__chunk_size: classify__chunk_size,
        classify__class_prior: classify__class_prior,
        classify__fit_prior: classify__fit_prior,
        feat_ext__alternate_sign: feat_ext__alternate_sign,
        feat_ext__analyzer: feat_ext__analyzer,
        feat_ext__binary: feat_ext__binary,
        feat_ext__decode_error: feat_ext__decode_error,
        feat_ext__encoding: feat_ext__encoding,
        feat_ext__input: feat_ext__input,
        feat_ext__lowercase: feat_ext__lowercase,
        feat_ext__n_features: feat_ext__n_features,
        feat_ext__ngram_range: feat_ext__ngram_range,
        feat_ext__norm: feat_ext__norm,
        feat_ext__preprocessor: feat_ext__preprocessor,
        feat_ext__stop_words: feat_ext__stop_words,
        feat_ext__strip_accents: feat_ext__strip_accents,
        feat_ext__token_pattern: feat_ext__token_pattern,
        feat_ext__tokenizer: feat_ext__tokenizer,
        verbose: verbose,
        classifier: classifier
    }

    command {
        q2dataflow wdl run feature_classifier fit_classifier_naive_bayes ~{write_json(task_params)}
    }

    output {
        File classifier_file = "~{classifier}"
    }

}


workflow wkflw_qiime2_feature_classifier_fit_classifier_naive_bayes {
input {
        File reference_reads
        File reference_taxonomy
        File? class_weight
        Float classify__alpha = 0.001
        Int classify__chunk_size = 20000
        String classify__class_prior = "null"
        Boolean classify__fit_prior = false
        Boolean feat_ext__alternate_sign = false
        String feat_ext__analyzer = "char_wb"
        Boolean feat_ext__binary = false
        String feat_ext__decode_error = "strict"
        String feat_ext__encoding = "utf-8"
        String feat_ext__input = "content"
        Boolean feat_ext__lowercase = true
        Int feat_ext__n_features = 8192
        String feat_ext__ngram_range = "[7, 7]"
        String feat_ext__norm = "l2"
        String feat_ext__preprocessor = "null"
        String feat_ext__stop_words = "null"
        String feat_ext__strip_accents = "null"
        String feat_ext__token_pattern = "(?u)\b\w\w+\b"
        String feat_ext__tokenizer = "null"
        Boolean verbose = false
        String classifier
    }

    call qiime2_feature_classifier_fit_classifier_naive_bayes {
        input: reference_reads=reference_reads, reference_taxonomy=reference_taxonomy, class_weight=class_weight, classify__alpha=classify__alpha, classify__chunk_size=classify__chunk_size, classify__class_prior=classify__class_prior, classify__fit_prior=classify__fit_prior, feat_ext__alternate_sign=feat_ext__alternate_sign, feat_ext__analyzer=feat_ext__analyzer, feat_ext__binary=feat_ext__binary, feat_ext__decode_error=feat_ext__decode_error, feat_ext__encoding=feat_ext__encoding, feat_ext__input=feat_ext__input, feat_ext__lowercase=feat_ext__lowercase, feat_ext__n_features=feat_ext__n_features, feat_ext__ngram_range=feat_ext__ngram_range, feat_ext__norm=feat_ext__norm, feat_ext__preprocessor=feat_ext__preprocessor, feat_ext__stop_words=feat_ext__stop_words, feat_ext__strip_accents=feat_ext__strip_accents, feat_ext__token_pattern=feat_ext__token_pattern, feat_ext__tokenizer=feat_ext__tokenizer, verbose=verbose, classifier=classifier
    }

}
