# 
# Copyright (c) 2023, QIIME 2 development team.
# 
# Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
# 
# 
# This tool was automatically generated by:
#     q2wdl (version: 0.1.0)
# for:
#     qiime2 (version: 2023.2.0)
# 


version 1.0

struct qiime2_cutadapt_trim_single_params {
    File demultiplexed_sequences
    Int cores
    Array[String]? adapter
    Array[String]? front
    Array[String]? anywhere
    Float error_rate
    Boolean indels
    Int times
    Int overlap
    Boolean match_read_wildcards
    Boolean match_adapter_wildcards
    Int minimum_length
    Boolean discard_untrimmed
    Float? max_expected_errors
    Float? max_n
    Int quality_cutoff_5end
    Int quality_cutoff_3end
    Int quality_base
    String trimmed_sequences
}

task qiime2_cutadapt_trim_single {

    input {
        File demultiplexed_sequences
        Int cores = 1
        Array[String]? adapter
        Array[String]? front
        Array[String]? anywhere
        Float error_rate = 0.1
        Boolean indels = true
        Int times = 1
        Int overlap = 3
        Boolean match_read_wildcards = false
        Boolean match_adapter_wildcards = true
        Int minimum_length = 1
        Boolean discard_untrimmed = false
        Float? max_expected_errors
        Float? max_n
        Int quality_cutoff_5end = 0
        Int quality_cutoff_3end = 0
        Int quality_base = 33
        String trimmed_sequences
    }

    qiime2_cutadapt_trim_single_params task_params = object {
        demultiplexed_sequences: demultiplexed_sequences,
        cores: cores,
        adapter: adapter,
        front: front,
        anywhere: anywhere,
        error_rate: error_rate,
        indels: indels,
        times: times,
        overlap: overlap,
        match_read_wildcards: match_read_wildcards,
        match_adapter_wildcards: match_adapter_wildcards,
        minimum_length: minimum_length,
        discard_untrimmed: discard_untrimmed,
        max_expected_errors: max_expected_errors,
        max_n: max_n,
        quality_cutoff_5end: quality_cutoff_5end,
        quality_cutoff_3end: quality_cutoff_3end,
        quality_base: quality_base,
        trimmed_sequences: trimmed_sequences
    }

    command {
        q2dataflow q2wdl run cutadapt trim_single ~{write_json(task_params)}
    }

    output {
        File trimmed_sequences_file = "~{trimmed_sequences}"
    }

}


workflow wkflw_qiime2_cutadapt_trim_single {
input {
        File demultiplexed_sequences
        Int cores = 1
        Array[String]? adapter
        Array[String]? front
        Array[String]? anywhere
        Float error_rate = 0.1
        Boolean indels = true
        Int times = 1
        Int overlap = 3
        Boolean match_read_wildcards = false
        Boolean match_adapter_wildcards = true
        Int minimum_length = 1
        Boolean discard_untrimmed = false
        Float? max_expected_errors
        Float? max_n
        Int quality_cutoff_5end = 0
        Int quality_cutoff_3end = 0
        Int quality_base = 33
        String trimmed_sequences
    }

    call qiime2_cutadapt_trim_single {
        input: demultiplexed_sequences=demultiplexed_sequences, cores=cores, adapter=adapter, front=front, anywhere=anywhere, error_rate=error_rate, indels=indels, times=times, overlap=overlap, match_read_wildcards=match_read_wildcards, match_adapter_wildcards=match_adapter_wildcards, minimum_length=minimum_length, discard_untrimmed=discard_untrimmed, max_expected_errors=max_expected_errors, max_n=max_n, quality_cutoff_5end=quality_cutoff_5end, quality_cutoff_3end=quality_cutoff_3end, quality_base=quality_base, trimmed_sequences=trimmed_sequences
    }

}
