# 
# Copyright (c) 2023, QIIME 2 development team.
# 
# Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
# 
# 
# This tool was automatically generated by:
#     q2wdl (version: 0.1.0)
# for:
#     qiime2 (version: 2023.2.0)
# 


version 1.0

struct qiime2_feature_classifier_classify_hybrid_vsearch_sklearn_params {
    File query
    File reference_reads
    File reference_taxonomy
    File classifier
    String maxaccepts
    Float perc_identity
    Float query_cov
    String strand
    Float min_consensus
    String maxhits
    String maxrejects
    String reads_per_batch
    String confidence
    String read_orientation
    Int threads
    Boolean prefilter
    Int sample_size
    Int randseed
    String classification
}

task qiime2_feature_classifier_classify_hybrid_vsearch_sklearn {

    input {
        File query
        File reference_reads
        File reference_taxonomy
        File classifier
        String maxaccepts = '10'
        Float perc_identity = 0.5
        Float query_cov = 0.8
        String strand = "both"
        Float min_consensus = 0.51
        String maxhits = 'all'
        String maxrejects = 'all'
        String reads_per_batch = 'auto'
        String confidence = '0.7'
        String read_orientation = "auto"
        Int threads = 1
        Boolean prefilter = true
        Int sample_size = 1000
        Int randseed = 0
        String classification
    }

    qiime2_feature_classifier_classify_hybrid_vsearch_sklearn_params task_params = object {
        query: query,
        reference_reads: reference_reads,
        reference_taxonomy: reference_taxonomy,
        classifier: classifier,
        maxaccepts: maxaccepts,
        perc_identity: perc_identity,
        query_cov: query_cov,
        strand: strand,
        min_consensus: min_consensus,
        maxhits: maxhits,
        maxrejects: maxrejects,
        reads_per_batch: reads_per_batch,
        confidence: confidence,
        read_orientation: read_orientation,
        threads: threads,
        prefilter: prefilter,
        sample_size: sample_size,
        randseed: randseed,
        classification: classification
    }

    command {
        q2dataflow q2wdl run feature_classifier classify_hybrid_vsearch_sklearn ~{write_json(task_params)}
    }

    output {
        File classification_file = "~{classification}"
    }

}


workflow wkflw_qiime2_feature_classifier_classify_hybrid_vsearch_sklearn {
input {
        File query
        File reference_reads
        File reference_taxonomy
        File classifier
        String maxaccepts = '10'
        Float perc_identity = 0.5
        Float query_cov = 0.8
        String strand = "both"
        Float min_consensus = 0.51
        String maxhits = 'all'
        String maxrejects = 'all'
        String reads_per_batch = 'auto'
        String confidence = '0.7'
        String read_orientation = "auto"
        Int threads = 1
        Boolean prefilter = true
        Int sample_size = 1000
        Int randseed = 0
        String classification
    }

    call qiime2_feature_classifier_classify_hybrid_vsearch_sklearn {
        input: query=query, reference_reads=reference_reads, reference_taxonomy=reference_taxonomy, classifier=classifier, maxaccepts=maxaccepts, perc_identity=perc_identity, query_cov=query_cov, strand=strand, min_consensus=min_consensus, maxhits=maxhits, maxrejects=maxrejects, reads_per_batch=reads_per_batch, confidence=confidence, read_orientation=read_orientation, threads=threads, prefilter=prefilter, sample_size=sample_size, randseed=randseed, classification=classification
    }

}
